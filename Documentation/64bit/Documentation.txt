____________________AsmFun__Documentation_______________________

			AsmFun module

AsmFun is the assembler functions for more convinient coding in nasm

Here's the list of all functions and their purpose for your coding pleasure:

1. _add0

	Purpose:
		This function adds 0 code in ASCII [NULL] to the string pointer.
		You will need to do this for _print cause it counts the
		string to that character.	

	Input: 
		- rdi as a pointer to memory

	Output:
		- String in rdi pointer is modified
		- al is modified

	Dependency: 
		If you want to use this function you have to put this line 
		of code into the end of your nasm code:
			%include "<Your_path_to_AsmFun>/Add0/main.asm"

2. _addMinus

	Purpose:
		This function adds "-" character (45 in ASCII) to the string pointer.

	Input:
		- rdi as a pointer to memory

	Output:
		- string being pointed by is modified
		
		- rdi is incremented
		
		- bl equals to 45

	Dependency:
		Put this line of code into your nasm code:
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"

3. _addNewLineCharacter

	Purpose:
		This function add "\n" character (10 in ASCII) to the string pointer.

	Input:
		- rdi as a pointer to memory

	Output:
		- string being pointed by rdi is modified
		
		- bl equals to 10
		
		- rdi is incremented

	Dependency:
		Put this line of code into your nasm code:
			%include "<Your_path_to_AsmFun>/AddNewLineCharacter/main.asm"

4. _assignFlippedIntegerPortion

	Purpose:
		Gets a string that is the flipped integer portion of a number in rax.
		Serves for the function _intToString. It also can be used for 
		number systems converstion if you want it to. 
	
	Input:
		- rax as an integer
	
		- rdi as a pointer to string
	
		- rbx is a devider (for decimal it must be 10)

	Output:
       		- rdx is modified
	
		- rdi points to the end of the destination string
	
		- rax equals to 0

		- string being pointed by rdi is modified

		- rbx remains the same

	Dependency:
       		Put this line of code into your nasm code:
               		%include "<Your_path_to_AsmFun>/AssignFlippedIntegerPortion/main.asm"

5. _break

	Purpose:
		Returns from the subroutine (your function)

	Input:
		Offset in the code sector (call saves it in stack automatically)

	Output:
		Returns from function

	Dependency:
		Put this line of code into your nasm code:
			%include "<Your_path_to_AsmFun>/Break/main.asm"

6. _flipString

	Purpose:
		This function takes the content of a string,
		flips it and puts it into the string pointer.

	Input:
		- rsi as a pointer to the source string
		
		- rdi as a pointer to the destination string 

	Output:
		- rsi remains the same

		- rdi points to the end of the destination string

		- r8 equals to rsi

		- rax is modified

		- source string remains
		the same

		- destination string is a 
		flipped source string

	Dependencies:
		These lines of code are going to require those lines
		in your nasm code:
			%include "<Your_path_to_AsmFun>/FlipTemp/main.asm" - this you have to put right in
		the end of your code
			%include "<Your_path_to_AsmFun>/TempRes/main.asm" - this you're gonna wanna
		put in the beginning of your nasm code


7. _floatToString _____________TODO___________

	Purpose:
		Converts floating point number into string and puts it to string pointer
	
	Input:
	
	OutPut:

	Dependency:
	
		  _____________TODO____________

8. _getDebugString

	Purpose:
		Generates string that contains info about all registers (their values I mean)

	Input:
		You just leave registers as they are

	Output:
		Debug string is going to be printed on the screen. All of your registers
		except rsi are safe (the reason why rsi is not safe is that we put there 
		a point to the string being printed).

	Dependencies:
		Resourses (that means you have to pass these lines right in the beginning of
		your code):

			%include "<Your_path_to_AsmFun>/GetDebugStringRes/main.asm"
			%include "<Your_path_to_AsmFun>/TempRes/main.asm"

		Code (that means you gonna wanna put these lines in the end of your script):

			%include "<Your_path_to_AsmFun>/GetDebugString/main.asm"
			%include "<Your_path_to_AsmFun>/PrintSafe/main.asm"	
			%include "<Your_path_to_AsmFun>/FlipTemp/main.asm"
			%include "<Your_path_to_AsmFun>/MinusCheck/main.asm"
			%include "<Your_path_to_AsmFun>/AssignFlippedIntegerPortion/main.asm"
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"
			%include "<Your_path_to_AsmFun>/Negate/main.asm"

9. _getFloatingPortion _____________TODO___________

	Purpose:
		Puts floating portion of the number into string pointer
	Input:

	OutPut:

	Dependency:
	       _____________TODO____________

11. _input
	Purpose:
		Puts the user's input into pointer to a string

	Input:
		- rsi as a pointer to memory

		- rdx as a maximum amount of characters in a string

	Output:
		- String being pointed by rsi is modified

		- rax equals to the length of a string with \0 character

		- rcx is modified

		- rdx remains the same

		- rsi is modified
	
		- r11 is modified

	Dependency:
	
		Code:
			%include "<Your_path_to_AsmFun>/Input/main.asm"	

12. _intToString
	Purpose:
		Converts integer value into string and puts it to a pointer to a string

	Input:
		- rax as an integer
	
		- rdi as a pointer to destination string

	Output:	
		- rdx is modified

		- rsi is modified

		- rdi is modified

		- r8 is modified

	Dependencies:
		Resourses:
			%include "<Your_path_to_AsmFun>/TempRes/main.asm"

		Code:
			%include "<Your_path_to_AsmFun>/MinusCheck/main.asm"
			%include "<Your_path_to_AsmFun>/AssignFlippedIntegerPortion/main.asm"
			%include "<Your_path_to_AsmFun>/FlipString/main.asm"
			%include "<Your_path_to_AsmFun>/IntToString/main.asm"
			%include "<Your_path_to_AsmFun>/Negate/main.asm"
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"
			%include "<Your_path_to_AsmFun>/Memclr/main.asm"

13. _minusCheck
	Purpose:
		Defines whether integer is positive or negative and puts "-" character
		into string pointer if necessary
	
	Input:
		- rax as an integer

		- rdi as a pointer to the destination string
	
	Output:	
		- bl equals to 45 if rax is negative else remains the same

		- string is modified if rax is negative

		- rdi is incremented if "-" was written to a string
	
	Dependencies:	
		Code:
			%include "<Your_path_to_AsmFun>/MinusCheck/main.asm"
			%include "<Your_path_to_AsmFun>/AddMinus/main.asm"
			%include "<Your_path_to_AsmFun>/Negate/main.asm"

14. _negate
	Purpose:
		Negates the number being in rax

	Input:
		- rax as an integer

	Output:
		- rax is negated

	Dependency:
		Code:
			%include "<Your_path_to_AsmFun>/Negate/main.asm"

15. _print
	Purpose:
		Print a text string to the screen

	Input:
		- rsi as a pointer to a source string

	Output:
		- rax equals to the length of a string

		- rcx is modified 
	
		- rdx equals to the length of a string
	
		- rsi is modified

		- rdi equals to 1
	
		- r11 is modified

	Dependency:	
		Code:
			%include "<Your_path_to_AsmFun>/Print/main.asm"

16. _printSafe
        Purpose:
                Print a text string with saving all registers
        
	Input:
        	- rsi as a pointer to string        
       
	Output: 
                - everything remains the same but string is printer
        
	Dependency:      
                Code:
                        %include "<Your_path_to_AsmFun>/PrintSafe/main.asm"

17. _exit
	Purpose:
		Quits from a program. In C the equivalent is "return 0;"
		meaning the program ended normally
	
	Input:
		- nothing
	
	Output:
		- nothing but program is terminated
	
	Dependency:
		Code:
			%include "<Your_path_to_AsmFun>/StandardExit/main.asm"

18. _strCapitalize
	Purpose:
                Puts capitalized letters into existing string
        
	Input:
                r9 as a pointer to a string
        
	Output: 
        	r9, rax are modified
        
	Dependencies:      
                Code:	
                        %include "<Your_path_to_AsmFun>/StrCapitalize/main.asm"
			%include "<Your_path_to_AsmFun>/Break/main.asm"

19. _strLowercase
        Purpose:
                Puts lowercase letters into existing string
        
	Input:
                r9 as a pointer to a string
        
	Output:
                r9, rax are modified
        
	Dependencies:
                Code:
                        %include "<Your_path_to_AsmFun>/StrLowercase/main.asm"
                        %include "<Your_path_to_AsmFun>/Break/main.asm"

20. _power
	Purpose:
		Raises integer to the power 
	
	Input:
		- rax as an integer

		- rcx as an integer exponential
	
	Output:
		- rbx equals to rax before function start

		- rax is raised to the power of rcx

		- rcx equals to 0
	
	Dependency:
		Code:
			%include "<Your_path_to_AsmFun>/Power/main.asm"

21. _stringToInt
	Purpose:
                Takes integer from string and puts it into register
        
	Input:
                r9 as a pointer to string
        
	Output:
                rax, rdi, r8, r10, r11 are modified, rsi is integer from string
        
	Dependency:
                Code:
                        %include "<Your_path_to_AsmFun>/StringToInt/main.asm"	
			%include "<Your_path_to_AsmFun>/Break/main.asm"

22. _factorial

	Purpose:
		Calculates the factorial via cycle

	Input:
		rbx as an integer

	Output:
		- rax equals to factorial of rax

		- rax is -1 if factorial doesn't exist

	Dependencies:
		Code:
			%include "<Your_path_to_AsmFun>/Factorial/main.asm"	
			%include "<Your_path_to_AsmFun>/Break/main.asm"

23. _strLen
	Purpose:
		Finds the length of the string
	
	Input:
		r9 as a pointer to string
	
	Output:
		rcx is the length of the string, rax is modified
	
	Dependencies:
		Code:
			%include "<Your_path_to_AsmFun>/StrLen/main.asm"
			%include "<Your_path_to_AsmFun>/Break/main.asm"

24. _haltMachine
        Purpose:
		Halts machine (this means it stops it)
	
        Input:
                - nothing

        Output:
		- if a system commits this function it stops the computer
		(I used this function in my os, in Linux is doesn't work)
	
        Dependencies:
                Code:
                        %include "<Your_path_to_AsmFun>/HaltMachine/main.asm"

25. _memclr
        Purpose:
                Puts zeros into memory

        Input:
                - rdi as a pointer to memory

		- rcx as amount of bytes to clear

        Output:
                - al equals to 0

		- rdi points to the memory + rcx

		- rcx remains the same

        Dependencies:
                Code:
                        %include "<Your_path_to_AsmFun>/Memclr/main.asm"

26. _memcpy
        Purpose:
                Loads memory from the source to the destination

        Input:
                - rsi is a pointer to source

		- rdi is a pointer to the destination

		- rcx is amount of bytes to copy

        Output:
                - al is modified

		- rsi points to the rsi + rcx

		- rdi points to the rdi + rcx

        Dependencies:
                Code:
                        %include "<Your_path_to_AsmFun>/Memcpy/main.asm"
